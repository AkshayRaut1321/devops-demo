name: CI-CD Pipeline

# 1. Trigger
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # You can add 'workflow_dispatch:' if you want manual trigger too.
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 2. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 3. Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'   # change if using 7.0 or other version

      # 4. Run tests (restore → build → test)
      - name: Restore dependencies
        run: dotnet restore DevOpsDemo.sln

      - name: Build
        run: dotnet build DevOpsDemo.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test DevOpsDemo.Tests/DevOpsDemo.Tests.csproj --verbosity normal

      # 5. Azure Login with Service Principal
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name devopsdemoacr  # replace with your secret if needed

      # 6. Build & Push Docker Image to ACR
      - name: Set image tag
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Docker build & push
        run: |
          FULL_IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.IMAGE_NAME }}:${IMAGE_TAG}
          echo "Building $FULL_IMAGE"
          docker build -t $FULL_IMAGE -f DevOpsDemo/Dockerfile DevOpsDemo
          echo "Pushing $FULL_IMAGE"
          docker push $FULL_IMAGE
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV

      # 7. Deploy to AKS
      - name: Get AKS credentials
        run: az aks get-credentials -g ${{ secrets.AKS_RG }} -n ${{ secrets.AKS_NAME }} --overwrite-existing

      - name: Replace image tag in manifest
        run: |
          sed -i "s|REPLACE_IMAGE_TAG|${IMAGE_TAG}|g" DevOpsDemo/k8s/deployment.yaml
          
      # - name: Apply Kubernetes manifests
      #   run: |
      #     kubectl apply -f DevOpsDemo/k8s/deployment.yaml

      # - name: Attach ACR to AKS
      #   run: |
      #     az aks update \
      #       --name ${{ secrets.AKS_NAME }} \
      #       --resource-group ${{ secrets.AKS_RG }} \
      #       --attach-acr ${{ secrets.ACR_NAME }}

      - name: Create imagePullSecret in AKS
        run: |
          kubectl create secret docker-registry acr-auth \
            --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-username=${{ secrets.ACR_PULL_USERNAME }} \
            --docker-password=${{ secrets.ACR_PULL_PASSWORD }} \
            --docker-email=dummy@example.com \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to AKS
        run: |
          kubectl set image deployment/devopsdemo-deployment \
            devopsdemo=${{ env.FULL_IMAGE }} --record
          kubectl rollout status deployment/devopsdemo-deployment --timeout=120s

      # 8. (Optional) Notifications
      # Example: Slack notification (requires webhook secret)
      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
